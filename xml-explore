#!/usr/bin/perl
use strict;
use warnings;
#
# Reads an XML file and allows scripted updates to that file
#

use XML::Twig;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;

if (!defined $ARGV[0]) {
	print "Usage: xml-explore XML_FILE [update script...]\n";
	print "\n";
	print "With no update script, reads standard input\n";
	print "use 'help;' to get list of update commands\n";
	print "\n";
	print "Example update script:\n";
	print '  cd /Service[@name="Catalina"]/Connector[@secure="false"];',"\n";
	print "  set_att port=\"80\";\n";
	print "  cd /;\n";
	print "  cat;\n";
	exit 1;
}

my $xml = XML::Twig->new();
if ($XML::Twig::VERSION >= 3.34) {
	$xml->set_pretty_print("indented_a");
} else {
	$xml->set_pretty_print("indented");
}

$xml->parsefile($ARGV[0]);
shift @ARGV;

# FIXME global!
my $cd = $xml->root;

sub do_command {
	local $_;
	my ($_,@args) = @_;

	return if (!defined $_);
	#print "cmd: $_ args: ",join(',',@args),"\n";

	if (m/^help$/) { # show a help screen
		print "cd, pwd, ls, cat, dump, delete, add, set_att\n";
	} elsif (m/^pwd$/) { print $cd->xpath,"\n";
	} elsif (m/^cat$/) { print $cd->print;
	} elsif (m/^dump$/) { print Dumper($cd);
	} elsif (m/^delete$/) { $cd->delete;
	} elsif (m/^add$/) {
		# hack to allow quoted args
		$args[0] =~ s/^"//; $args[0] =~ s/"$//;
		my $e = XML::Twig::Elt->new($args[0]);
		$e->paste( last_child => $cd );
		$cd = $e;
	} elsif (m/^ls$/) {
		print $_->name,"\t" foreach($cd->children);
		print "\n";
	} elsif (m/^cd$/) {
		my $old_cd = $cd;
		# hack to allow quoted args
		$args[0] =~ s/^"//; $args[0] =~ s/"$//;
		my $path=join('',@args);
		if ($path =~ s{^/}{}) {
			# hack!
			# get_xpath('/') returns success but the object
			# returned does not have a ->path or a ->set_att.
			# This has been generalised to allow any path to
			# start from root, as that didnt work either.
			# TODO - surely this is not required
			$cd = $xml->root;
		}
		$cd = $cd->get_xpath($path,0);
		if (!defined $cd) {
			$cd = $old_cd;
			print("could not change to $path\n");
		}
	} elsif (m/^set_att$/) {
		foreach(@args) {s/^"//;s/"$//;}
		my $var = shift @args;
		if (shift @args ne '=') {
			warn "missing equals in set";
			return;
		}
		my $val = join('',@args);
		$cd->set_att($var,$val);
	} else {
		warn("unknown command $_");
	}
}

# TODO - pass the stdin via a macro compiler
sub do_repl {
	my @words;
	$_='';
	while(1){
		if (!$_) {
			# refill
			$_=<>;
			if (!defined $_) { # eof
				do_command(@words);
				return;
			}
		}

		# match tokens
		if (s/^\s+// || s/^#.*//) { # whitespace or comments
		} elsif (s{^(\w+)}{} ) { # word
			push @words,$1;
		} elsif (s/^\\\"//) { # quoted quote
			push @words,'"';
		} elsif (s{^([][/@=.])}{}) { # pseudo words
			push @words,$1;
		} elsif (m/^\"/) { # begining of a quote
			if (s/(".*?[^\\]\"|"")//s) { # found end of quote
				my $s=$1;
				$s =~ s/\\\"/\"/g;
				push @words,$s;
			} else  {
				# refill
				my $s=<>;
				if (!defined $s) {
					die("eof mid string");
				}
				$_.=$s;
			}
		} elsif (s/^;//) { # end of command
			do_command(@words);
			@words=();
		} elsif (s/^(.)//s) { # junk character?
			warn ("got junk char: ",$1,"\n");
		}
	}
}

do_repl($_);

